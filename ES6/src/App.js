import { MultipleChoice } from './components/MultipleChoice/index.js'
import { FillBlank } from './components/FillBlank/index.js' // import t·ª´ ch·ªó 'export' (kh√¥ng c√≥ default) th√¨ bu·ªôc ph·∫£i gi·ªëng t√™n v·ªõi 'component' ƒë√≥
import HaroLibrary from './vendors/HaroLibrary.js'

class App extends HaroLibrary { // es6
  state = {
    questionsAscyn: ''
  }

  questions = []

  fetchQuestions () { // l·∫•y d·ªØ li·ªáu t·ª´ ph√≠a backend
    // fetch('questions.json')
    fetch('https://60cdf85c91cc8e00178dc3cc.mockapi.io/api/v1/questions', { method: 'GET' }) // h√†m fetch ch√≠nh l√† c√¥ng c·ª• ƒë·ªÉ l√†m vi·ªác v·ªõi Promise
      // .then(function (response) { // vi·∫øt theo function th∆∞·ªùng
      //   return response.json()
      // })

      /* arrow function c·ªßa ES6. Function th∆∞·ªùng ch·ªâ c·∫ßn b·ªè ch·ªØ funciton ·ªü tr∆∞·ªõc v√† th√™m d·∫•u '=>' ·ªü sau s·∫Ω l√† 'arrow function' 
      * n·∫øu ch·ªâ c√≥ m·ªôt 'parameter' (tham s·ªë) c√≥ th·ªÉ b·ªè ngo·∫∑c tr√≤n. V√≠ d·ª•: response => { ...n·ªôi dung h√†m }
      * n·∫øu n·ªôi dung h√†m ch·ªâ c√≥ 1 d√≤ng return th√¨ b·ªè lu√¥n { return... }. V√≠ d·ª• response => response.json(). Nghƒ©a l√† m√¨nh ƒëang return response.json()
      */

      // promise chain
      .then(response => response.json()) // then ch√≠nh l√† m·ªôt higher order function. Th√¨ h√†m m√† ƒë∆∞·ª£c nh·∫≠n v√†o d∆∞·ªõi d·∫°ng ƒë·ªëi s·ªë c·ªßa h√†m n√†y l√† callback function
      .then(questions => { // h√†m 'then' ch√≠nh l√† l·ªùi h·ª©a ƒë∆∞·ª£c th·ª±c hi·ªán 
        this.renderQuestions(questions)
      })
      .catch(error => { // h√†m 'catch' l√† th·∫•t h·ª©a
        console.log(error)
      })
  }

  renderQuestions (questions = []) { // method. questions = [] --> default parameter
    // for (const question of questions) {}
    // 1. b√≥c t√°ch ph·∫ßn t·ª≠ m·∫£ng
    // const [,,multipleChoice3] = questions
    // console.log("üöÄ ~ file: App.js ~ line 34 ~ App ~ renderQuestions ~ multipleChoice1", multipleChoice1)

    let questionsAscyn = ''

    for (const index in questions) {
      // 2. b√≥c t√°ch ƒë·ªëi t∆∞·ª£ng (object) th√¨ ch·ªâ quan t√¢m ƒë√∫ng key --> kh√¥ng c·∫ßn ƒë√∫ng th·ª© t·ª±
      const { questionType, id, content, answers } = questions[index] // destructuring: b√≥c t√°ch ph·∫ßn t·ª≠
      questionsAscyn += `<h6 class='mt-3'>C√¢u ${parseInt(index) + 1}: ${content}</h6>`

      switch (questionType) {
        case 1:
          const multipleChoice = new MultipleChoice(id, answers)
          this.questions.push(multipleChoice)
          questionsAscyn += multipleChoice.render()
          break;

        case 2:
          const fillBlank = new FillBlank(id, answers)
          this.questions.push(fillBlank)
          questionsAscyn += fillBlank.render()
          break;
      
        default:
          break;
      }
    }
    // for (let index = 0; index < questions.length; index++) {
      
    // }
    this.setState({ questionsAscyn }) // object literals
  }

  render () { // method: ph∆∞∆°ng th·ª©c
    // tuy·ªát ƒë·ªëi kh√¥ng bao gi·ªù ƒë·ª•ng ƒë·∫øn 'var' khi khai b√°o m·ªôt bi·∫øn
    const title = 'ES6 - Part 01: Testing online' // constant: h·∫±ng s·ªë
    const { questionsAscyn } = this.state // t∆∞∆°ng ƒë∆∞∆°ng const questionsAscyn = this.state.questionsAscyn

    // console.log('ƒê·ªìng b·ªô 1')
    // setTimeout(() => console.log('B·∫•t ƒë·ªìng b·ªô'), 0) // d√π timeout l√† 0 hay bao nhi√™u chƒÉng n·ªØa JS v·∫´n hi·ªÉu n√≥ l√† h√†m b·∫•t ƒë·ªìng b·ªô
    // console.log('ƒê·ªìng b·ªô 2')

    document.getElementById('root').innerHTML = `
      <div>
        <h1 class='text-center'>${title}</h1>
        <div class='container pb-5'>
          ${questionsAscyn}
          <button class='btn btn-warning' id='reset'>L√†m l·∫°i</button>
          <button class='btn btn-success' id='submit'>N·ªôp b√†i</button>
          <div class='mt-2'>B·∫°n tr·∫£ l·ªùi ƒë√∫ng <span id='display-total'>0</span>/${this.questions.length}</div>
        </div>
      </div>
    `

    document.getElementById('reset').addEventListener('click', () => {
      window.scrollTo(0, 0)
      window.location.reload()
    })

    document.getElementById('submit').addEventListener('click', () => {
      document.getElementById('display-total').innerHTML = this.questions.reduce((total, ques) => total += ques.checkExact(), 0)
    })
  }

  componentDidMount () {
    this.fetchQuestions()
  }
}

// xu·∫•t instance c·ªßa ƒë·ªëi t∆∞·ª£ng 'App'
export default new App() // kh√¥ng c√≥ constructor

// function App () { // es5
//   this.state = { questionsAscyn: '' } // attribute: thu·ªôc t√≠nh
//   this.render = function () { // method: ph∆∞∆°ng th·ª©c

//   }
// }
